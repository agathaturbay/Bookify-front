import { Subscription } from 'rxjs';
import { isPipe } from './ivy';
import { getSymbol, completeSubjectOnTheInstance, markAsDecorated, } from './internals';
function unsubscribe(property) {
    if (property instanceof Subscription) {
        property.unsubscribe();
    }
}
function unsubscribeIfPropertyIsArrayLike(property) {
    Array.isArray(property) && property.forEach(unsubscribe);
}
function decorateNgOnDestroy(ngOnDestroy, options) {
    return function () {
        // Invoke the original `ngOnDestroy` if it exists
        ngOnDestroy && ngOnDestroy.call(this);
        // It's important to use `this` instead of caching instance
        // that may lead to memory leaks
        completeSubjectOnTheInstance(this, getSymbol());
        // Check if subscriptions are pushed to some array
        if (options.arrayName) {
            return unsubscribeIfPropertyIsArrayLike(this[options.arrayName]);
        }
        // Loop through the properties and find subscriptions
        if (options.checkProperties) {
            for (const property in this) {
                if (options.blackList?.includes(property)) {
                    continue;
                }
                unsubscribe(this[property]);
            }
        }
    };
}
function decorateProviderDirectiveOrComponent(type, options) {
    type.prototype.ngOnDestroy = decorateNgOnDestroy(type.prototype.ngOnDestroy, options);
}
function decoratePipe(type, options) {
    const def = type.Éµpipe;
    def.onDestroy = decorateNgOnDestroy(def.onDestroy, options);
}
export function UntilDestroy(options = {}) {
    return (type) => {
        if (isPipe(type)) {
            decoratePipe(type, options);
        }
        else {
            decorateProviderDirectiveOrComponent(type, options);
        }
        markAsDecorated(type);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50aWwtZGVzdHJveS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdW50aWwtZGVzdHJveS9zcmMvbGliL3VudGlsLWRlc3Ryb3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVwQyxPQUFPLEVBQVksTUFBTSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3pDLE9BQU8sRUFDTCxTQUFTLEVBRVQsNEJBQTRCLEVBQzVCLGVBQWUsR0FDaEIsTUFBTSxhQUFhLENBQUM7QUFFckIsU0FBUyxXQUFXLENBQUMsUUFBaUI7SUFDcEMsSUFBSSxRQUFRLFlBQVksWUFBWSxFQUFFO1FBQ3BDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUN4QjtBQUNILENBQUM7QUFFRCxTQUFTLGdDQUFnQyxDQUFDLFFBQWU7SUFDdkQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUMxQixXQUE0QyxFQUM1QyxPQUE0QjtJQUU1QixPQUFPO1FBQ0wsaURBQWlEO1FBQ2pELFdBQVcsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRDLDJEQUEyRDtRQUMzRCxnQ0FBZ0M7UUFDaEMsNEJBQTRCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFFaEQsa0RBQWtEO1FBQ2xELElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUNyQixPQUFPLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUNsRTtRQUVELHFEQUFxRDtRQUNyRCxJQUFJLE9BQU8sQ0FBQyxlQUFlLEVBQUU7WUFDM0IsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0JBQzNCLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ3pDLFNBQVM7aUJBQ1Y7Z0JBRUQsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2FBQzdCO1NBQ0Y7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxvQ0FBb0MsQ0FDM0MsSUFBNkQsRUFDN0QsT0FBNEI7SUFFNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEYsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFJLElBQWlCLEVBQUUsT0FBNEI7SUFDdEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN2QixHQUFHLENBQUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDOUQsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsVUFBK0IsRUFBRTtJQUM1RCxPQUFPLENBQUMsSUFBUyxFQUFFLEVBQUU7UUFDbkIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEIsWUFBWSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM3QjthQUFNO1lBQ0wsb0NBQW9DLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbmplY3RhYmxlVHlwZSxcbiAgybVDb21wb25lbnRUeXBlIGFzIENvbXBvbmVudFR5cGUsXG4gIMm1RGlyZWN0aXZlVHlwZSBhcyBEaXJlY3RpdmVUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBQaXBlVHlwZSwgaXNQaXBlIH0gZnJvbSAnLi9pdnknO1xuaW1wb3J0IHtcbiAgZ2V0U3ltYm9sLFxuICBVbnRpbERlc3Ryb3lPcHRpb25zLFxuICBjb21wbGV0ZVN1YmplY3RPblRoZUluc3RhbmNlLFxuICBtYXJrQXNEZWNvcmF0ZWQsXG59IGZyb20gJy4vaW50ZXJuYWxzJztcblxuZnVuY3Rpb24gdW5zdWJzY3JpYmUocHJvcGVydHk6IHVua25vd24pOiB2b2lkIHtcbiAgaWYgKHByb3BlcnR5IGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgcHJvcGVydHkudW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnN1YnNjcmliZUlmUHJvcGVydHlJc0FycmF5TGlrZShwcm9wZXJ0eTogYW55W10pOiB2b2lkIHtcbiAgQXJyYXkuaXNBcnJheShwcm9wZXJ0eSkgJiYgcHJvcGVydHkuZm9yRWFjaCh1bnN1YnNjcmliZSk7XG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlTmdPbkRlc3Ryb3koXG4gIG5nT25EZXN0cm95OiAoKCkgPT4gdm9pZCkgfCBudWxsIHwgdW5kZWZpbmVkLFxuICBvcHRpb25zOiBVbnRpbERlc3Ryb3lPcHRpb25zXG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGlzOiBhbnkpIHtcbiAgICAvLyBJbnZva2UgdGhlIG9yaWdpbmFsIGBuZ09uRGVzdHJveWAgaWYgaXQgZXhpc3RzXG4gICAgbmdPbkRlc3Ryb3kgJiYgbmdPbkRlc3Ryb3kuY2FsbCh0aGlzKTtcblxuICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIHVzZSBgdGhpc2AgaW5zdGVhZCBvZiBjYWNoaW5nIGluc3RhbmNlXG4gICAgLy8gdGhhdCBtYXkgbGVhZCB0byBtZW1vcnkgbGVha3NcbiAgICBjb21wbGV0ZVN1YmplY3RPblRoZUluc3RhbmNlKHRoaXMsIGdldFN5bWJvbCgpKTtcblxuICAgIC8vIENoZWNrIGlmIHN1YnNjcmlwdGlvbnMgYXJlIHB1c2hlZCB0byBzb21lIGFycmF5XG4gICAgaWYgKG9wdGlvbnMuYXJyYXlOYW1lKSB7XG4gICAgICByZXR1cm4gdW5zdWJzY3JpYmVJZlByb3BlcnR5SXNBcnJheUxpa2UodGhpc1tvcHRpb25zLmFycmF5TmFtZV0pO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgcHJvcGVydGllcyBhbmQgZmluZCBzdWJzY3JpcHRpb25zXG4gICAgaWYgKG9wdGlvbnMuY2hlY2tQcm9wZXJ0aWVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIHRoaXMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYmxhY2tMaXN0Py5pbmNsdWRlcyhwcm9wZXJ0eSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuc3Vic2NyaWJlKHRoaXNbcHJvcGVydHldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlUHJvdmlkZXJEaXJlY3RpdmVPckNvbXBvbmVudDxUPihcbiAgdHlwZTogSW5qZWN0YWJsZVR5cGU8VD4gfCBEaXJlY3RpdmVUeXBlPFQ+IHwgQ29tcG9uZW50VHlwZTxUPixcbiAgb3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9uc1xuKTogdm9pZCB7XG4gIHR5cGUucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZGVjb3JhdGVOZ09uRGVzdHJveSh0eXBlLnByb3RvdHlwZS5uZ09uRGVzdHJveSwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlUGlwZTxUPih0eXBlOiBQaXBlVHlwZTxUPiwgb3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9ucyk6IHZvaWQge1xuICBjb25zdCBkZWYgPSB0eXBlLsm1cGlwZTtcbiAgZGVmLm9uRGVzdHJveSA9IGRlY29yYXRlTmdPbkRlc3Ryb3koZGVmLm9uRGVzdHJveSwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBVbnRpbERlc3Ryb3kob3B0aW9uczogVW50aWxEZXN0cm95T3B0aW9ucyA9IHt9KTogQ2xhc3NEZWNvcmF0b3Ige1xuICByZXR1cm4gKHR5cGU6IGFueSkgPT4ge1xuICAgIGlmIChpc1BpcGUodHlwZSkpIHtcbiAgICAgIGRlY29yYXRlUGlwZSh0eXBlLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVjb3JhdGVQcm92aWRlckRpcmVjdGl2ZU9yQ29tcG9uZW50KHR5cGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIG1hcmtBc0RlY29yYXRlZCh0eXBlKTtcbiAgfTtcbn1cbiJdfQ==